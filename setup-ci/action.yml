name: 'setup-ci'
description: 'Setup CI variables according to calling context'
author: 'Christian Fournier'

inputs:
  conda-directory:
    description: "Sub-directory containing conda recipe (meta.yaml). Default `conda`."
    required: false
    default: 'conda'
  python-minor-version:
    description: 'List of python minor versions to build/deploy the package. Default is "[9, 10, 11, 12]".'
    default: "[9, 10, 11, 12]"
    required: false
  operating-system:
    description: 'List of OS to build/deploy the package. Default is [ubuntu-latest, macos-latest, macos-13, windows-latest].'
    default: '["ubuntu-latest", "macos-latest", "macos-13", "windows-latest"]'
    required: false
  force-build-matrix:
    description: 'Force full input matrix builds whatever the context.'
    default: 'false'
    required: false
  dev-label:
    description: 'Anaconda label for uploading development builds'
    default: 'dev'
    required: false
  rc-label:
    description: 'Anaconda label for uploading release candidates builds'
    default: 'rc'
    required: false
  release-label:
    description: 'Anaconda label for uploading release builds'
    default: 'main'
    required: false
  force-label:
    description: 'Force all uploads to this label, except if force-label=false (default)'
    default: 'false'
    required: false
  force-skip-promotion:
    description: 'Force skipping promotion.'
    default: 'false'
    required: false
  force-skip-publish:
    description: 'Force skipping publication.'
    default: 'false'
    required: false
  simulated-ref:
    description: '(debug) use this ref instead of actual github.ref context. Leave empty for normal use'
    required: false
    default: ''
  simulated-event:
    description: '(debug) use this event instead of actual github.event_name context Leave empty for normal use'
    required: false
    default: ''
    
outputs:
  is_master:
    description: "True if the ref is main or master"
    value: ${{ steps.context.outputs.is_master }}
  is_branch:
    description: "True if the ref is a non-main branch"
    value: ${{ steps.context.outputs.is_branch }}
  is_release:
    description: "True if the event is a GitHub release"
    value: ${{ steps.context.outputs.is_release }}
  is_tag:
    description: "True if the ref is a version tag"
    value: ${{ steps.context.outputs.is_tag }}
  is_pr:
    description: "True if the event is a pull request"
    value: ${{ steps.context.outputs.is_pr }}
  build_os:
    description: "Selected OS to build on"
    value: ${{ steps.set-matrix.outputs.build_os }}
  build_py:
    description: "Selected Python minor versions to build on"
    value: ${{ steps.set-matrix.outputs.build_py }}

runs:
  using: "composite"
  steps:
    - name: Check context requirements
      shell: bash
      run: |
        echo "::group::Check context requirements"
        if [ -z "$GITHUB_EVENT_NAME" ]; then
          echo "GITHUB_EVENT_NAME is not set!"
          exit 1
        fi
        if [ -z "$GITHUB_REF" ]; then
          echo "GITHUB_REF is not set!"
          exit 1
        fi
        echo "::endgroup::"
    - name: Detect Git Context
      id: context
      shell: bash
      run: |
        echo "::group::Determine context"
        ref="${{ (inputs.simulated-ref != '') && inputs.simulated-ref || env.GITHUB_REF }}"
        event="${{ (inputs.simulated-event != '') && inputs.simulated-event || env.GITHUB_EVENT_NAME }}"
        is_master=false
        is_branch=false
        is_release=false
        is_tag=false
        is_pr=false
        if [[ "$event" == "push" ]]; then
          # pushing tag + commit together on master should result in is_tag=true, is_master=false (desired to avoid concurent builds)
          if [[ "$ref" == refs/tags/v* ]]; then
            is_tag=true
          elif [[ "$ref" == "refs/heads/master" || "$ref" == "refs/heads/main" ]]; then
            is_master=true
          else
            is_branch=true
          fi
        elif [[ "$event" == "pull_request" ]]; then
            is_pr=true
        elif [[ "$event" == "release" ]]; then
            is_release=true
        fi
        echo "Context:"
        echo "  Push on branch: $is_branch"
        echo "  Push on master: $is_master"
        echo "  Pull request:   $is_pr"
        echo "  Push tag:       $is_tag"
        echo "  Release:        $is_release"
        echo "is_master=$is_master" >> "$GITHUB_OUTPUT"
        echo "is_branch=$is_branch" >> "$GITHUB_OUTPUT"
        echo "is_release=$is_release" >> "$GITHUB_OUTPUT"
        echo "is_tag=$is_tag" >> "$GITHUB_OUTPUT"
        echo "is_pr=$is_pr" >> "$GITHUB_OUTPUT"
        echo "::endgroup::"
    - name: Set OS Ã— Python build matrix depending on event
      id: set-matrix
      shell: bash
      run: |
        echo "::group::Determine build matrix"
        os="${{ inputs.operating-system }}"
        py="${{ inputs.python-minor-version }}"
        force="${{ inputs.force-build-matrix }}"
        is_branch="${{ steps.context.outputs.is_branch }}"
        is_tag="${{ steps.context.outputs.is_tag }}"
        if [[ "$force" != "true" ]]; then
          if [[ "$is_branch" == "true" ]]; then
            os='["ubuntu-latest"]'
          fi
          # only tags are built on multi py
          if [[ "$is_tag" != "true" ]]; then
            py='[12]'
          fi
          # no build trigerred by release : promotion only
          if [[ "$is_release" == "true" ]]; then
            os='[]'
            py='[]'
          fi
        fi
        echo "Selected operating systems to build on: $os"
        echo "Selected Python minor versions to build on: $py"
        echo "build_os=$os" >> "$GITHUB_OUTPUT"
        echo "build_py=$py" >> "$GITHUB_OUTPUT"
        echo "::endgroup::"
    # - name: Check if meta.yml exists in ${{ inputs.conda }} directory
      # id: check-meta
      # working-directory: ./${{ inputs.conda }}
      # run: |
        # echo "::group::Checking the conda directory if the file meta.yaml exists"
        # if [ ! -f meta.yaml ]; then
           # echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.conda }}."
           # exit 1
        # else
           # echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.conda }}."
        # fi
        # echo "::endgroup::"
      # shell: bash