name: 'build-publish-anaconda'
description: 'Build and Publish anaconda package'
author: 'Thomas Arsouze'
branding:
  icon: 'package'
  color: 'green'
inputs:
  conda:
    description: "Sub_directory hosting conda recipe. Default `conda` ."
    required: false
    default: 'conda'
  condapython:
    description: 'Python3 minor version used for conda. Default `12`.'
    required: false
    default: '12'
  python:
    description: 'Python3 minor version used for building. Default `12`.'
    required: false
    default: '12'
  numpy:
    description: 'Numpy (full, i.e. x.x) version used for building. Default is fixed by Python version.'
    required: false
    default: ''
  token:
    description: 'Anaconda access Token (required)'
    required: true
  channels:
    description: 'Optional Extra anaconda channels to use. Coma-separated syntax. Default `conda-forge`.'
    required: false
    default: 'conda-forge'
  build-options:
    description: 'Build options for conda build.'
    required: false
    default: '--no-test'
  label:
    description: 'Label of conda package published. Default `latest`.'
    required: false
    default: 'latest'
  suffix_if_latest:
    description: 'Suffix to be added after build_string before uploading on latest. Default `_nightly`.'
    required: false
    default: '_nightly'
  promote_from:
    description: 'Label of Annaconda channel to promote from if promotion to main is activated. Default is "rc" (release candidate)'
    default: 'rc'
    required: false
  skip_build:
    description: 'Whether conda build step should be skipped. Default is "false"'
    default: 'false'
    required: false
  publish:
    description: 'Whether Anaconda publication step should be run. Default is "true"'
    default: 'true'
    required: false
  copy_on_latest:
    description: 'Whether a publication on latest is required, in addition to publication on a different label. Default is "false"'
    default: 'false'
    required: false
  skip_promote:
    description: 'Whether promotion to label main should be skipped. Default is "true"'
    default: 'true'
    required: false

runs:
  using: "composite"
  steps:
    - name: Check if meta.yml exists in ${{ inputs.conda }} directory
      id: check-meta
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Checking the conda directory if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
           echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.conda }}."
           exit 1
        else
           echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.conda }}."
        fi
        echo "::endgroup::"
      shell: bash
    - name: Check if anaconda login information are available
      id: check-login
      if: ${{ inputs.publish == 'true' }}
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Checking if the token variable is correclty set"
        if [[ "${{ inputs.token }}" == "" ]]; then
           echo "No token variable is set for upload."
           exit 1
        else
           echo "Token is correctly set."
        fi
        echo "::endgroup::"
      shell: bash
    - name: Setup Conda environment
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: 3.${{ inputs.condapython }}
        channels: ${{ inputs.channels }}
        auto-update-conda: false
        miniforge-version: latest
        conda-remove-defaults: true
        channel-priority: strict
    - name: Setup anaconda-client
      if: ${{ inputs.publish == 'true' || inputs.skip_promote == 'false' }}
      run:  |
        echo "::group::Setup anaconda-client"
        conda install -q anaconda-client
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Setup conda-build
      if: ${{ inputs.skip_build == 'false' }}
      run:  |
        echo "::group::Setup conda-build"
        conda install -q conda-build
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Numpy selection
      id: numpy-selection
      run: |
        export PYTHON_VERSION="3.${{ inputs.python }}"
        echo "::group::Numpy selection for Python ${PYTHON_VERSION}"
        if [[ '${{ inputs.numpy }}' = '0' ]]; then
          echo "Associate numpy version to python version provided"
          if [[ ${PYTHON_VERSION} = "3.8" ]]; then
            export NUMPY_VERSION="1.22"
          elif [[ ${PYTHON_VERSION} = "3.9" ]]; then
            export NUMPY_VERSION="1.22"
          elif [[ ${PYTHON_VERSION} = "3.10" ]]; then
            export NUMPY_VERSION="1.22"
          elif [[ ${PYTHON_VERSION} = "3.11" ]]; then
            export NUMPY_VERSION="1.23"
          elif [[ ${PYTHON_VERSION} = "3.12" ]]; then
            export NUMPY_VERSION="1.26"
          elif [[ ${PYTHON_VERSION} = "3.13" ]]; then
            export NUMPY_VERSION="2.2"
          else
            echo "Unable to build the package with this version of python (yet). Please choose a subversion of Python3: 8, 9, 10, 11, 12, 13"
            exit 1
          fi
        else
          echo "Numpy version ${{ inputs.numpy }} requested"
          export NUMPY_VERSION="${{ inputs.numpy }}"
          if [[ ${PYTHON_VERSION} = "3.11" ]]; then
            if [[ ${NUMPY_VERSION} < '1.23' ]]; then
              echo "With Python 3.11, Numpy version can only be 1.23."
              export NUMPY_VERSION='1.23'
            fi
          fi
          if [[ ${PYTHON_VERSION} = "3.12" ]]; then
            if [[ ${NUMPY_VERSION} < '1.26' ]]; then
              echo "With Python 3.12, Numpy version can only be 1.26."
              export NUMPY_VERSION='1.26'
            fi
          fi
          if [[ ${PYTHON_VERSION} = "3.13" ]]; then
            if [[ ${NUMPY_VERSION} < '2.2' ]]; then
              echo "With Python 3.13, Numpy version can only be 2.2."
              export NUMPY_VERSION='2.2'
            fi
          fi
        fi
        echo "Numpy version selected is ${NUMPY_VERSION}"
        echo "numpy_version=${NUMPY_VERSION}" >> $GITHUB_OUTPUT
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Package compilation
      id: package-compilation
      if: ${{ inputs.skip_build == 'false' }}
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Conda packages building"
        export PYTHON_VERSION="3.${{ inputs.python }}"
        export NUMPY_VERSION=${{ steps.numpy-selection.outputs.numpy_version }}
        export GIT_DESCRIBE_TAG="dev"
        out_dir=`mktemp -d conda-build-dir.XXXXXX`
        echo "Running 'conda build' with python ${PYTHON_VERSION} and numpy ${NUMPY_VERSION} and git version tag ${GIT_DESCRIBE_TAG}"
        conda build . --output-folder $out_dir --python=${PYTHON_VERSION} --numpy=${NUMPY_VERSION} ${{ inputs.build-options }}
        echo "out_dir='$out_dir'" >> $GITHUB_OUTPUT
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Package uploading
      id: package-uploading
      if: ${{ inputs.publish == 'true' }}
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Conda packages uploading"
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        export BUILD_SUFFIX=""
        if [ "${{ inputs.label }}" == "latest" ]; then
          export BUILD_SUFFIX="${{ inputs.suffix_if_latest }}"
        fi
        export PYTHON_VERSION="3.${{ inputs.python }}"
        
        for BUILD_FILE in ${{ steps.package-compilation.outputs.out_dir }}/*/*.conda; do
          if [ -z "${BUILD_SUFFIX}" ]; then
            echo "Upload file ${BUILD_FILE} to Anaconda on label ${{ inputs.label }}"
            anaconda upload --force --no-progress --label "${{ inputs.label }}" "${BUILD_FILE}"
          else
            DIRNAME=$(dirname "${BUILD_FILE}")
            BASENAME=$(basename "${BUILD_FILE}" .conda)
            SUFFIXED_FILE="${DIRNAME}/${BASENAME}${BUILD_SUFFIX}.conda"
            echo "Creating suffixed file: ${SUFFIXED_FILE}"
            cp "${BUILD_FILE}" "${SUFFIXED_FILE}"
            echo "Upload file ${SUFFIXED_FILE} to Anaconda on label ${{ inputs.label }}"
            anaconda upload --force --no-progress --label "${{ inputs.label }}" "${SUFFIXED_FILE}"
          fi
        done
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Copy on latest
      id: copy-on-latest
      if: ${{ inputs.copy_on_latest == 'true' }}
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Upload copy on latest"
        export ANACONDA_API_TOKEN=${{ inputs.token }}  
        export PYTHON_VERSION="3.${{ inputs.python }}"
        export BUILD_SUFFIX="${{ inputs.suffix_if_latest }}"
        export CONDA_PYTHON_VERSION="3.${{ inputs.condapython }}"
        if [ "${PYTHON_VERSION}" == "${CONDA_PYTHON_VERSION}" ]; then
          for BUILD_FILE in ${{ steps.package-compilation.outputs.out_dir }}/*/*.conda; do
            DIRNAME=$(dirname "${BUILD_FILE}")
            BASENAME=$(basename "${BUILD_FILE}" .conda)
            SUFFIXED_FILE="${DIRNAME}/${BASENAME}${BUILD_SUFFIX}.conda"
            echo "Creating a copy to send to latest: ${SUFFIXED_FILE}"
            cp "${BUILD_FILE}" "${SUFFIXED_FILE}"
            echo "Upload file ${SUFFIXED_FILE} to Anaconda on label latest"
            anaconda upload --force --no-progress --label latest "${SUFFIXED_FILE}"
          done
        fi
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Package promotion
      id: package-promotion
      if: ${{ inputs.skip_promote == 'false' }}
      run: |
        echo "::group::Conda packages promotion"
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        export PACKAGE_NAME=$(grep '^name =' pyproject.toml | cut -d'"' -f2)
        export VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
        export PACKAGE_SPEC="openalea3/${PACKAGE_NAME}/${VERSION}"
        echo "Promoting package with spec : ${PACKAGE_SPEC}"
        anaconda copy "${PACKAGE_SPEC}" --from-label "${{ inputs.promote_from }}" --to-label main --replace
        echo "::endgroup::"
      shell: bash -l {0}