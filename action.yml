name: 'build-publish-anaconda'
description: 'Build and Publish anaconda package'
author: 'Thomas Arsouze'
branding:
  icon: 'package'
  color: 'green'
inputs:
  conda:
    description: "Sub_directory hosting conda recipe. Default `conda` ."
    required: false
    default: 'conda'
  condapython:
    description: 'Python3 minor version used for conda. Default `12`.'
    required: false
    default: '12'
  python:
    description: 'Python3 minor version used for building. Default `12`.'
    required: false
    default: '12'
  token:
    description: 'Anaconda access Token (required)'
    required: true
  channels:
    description: 'Optional Extra anaconda channels to use. Coma-separated syntax. Default `conda-forge`.'
    required: false
    default: 'openalea3, conda-forge'
  build-options:
    description: 'Build options for conda build.'
    required: false
    default: '--no-test'
  label:
    description: 'Label of conda package published. Default `main`.'
    required: false
    default: 'main'
  suffix:
    description: 'Suffix for package build_string. Default `` (no suffix).'
    required: false
    default: ''
  publish:
    description: 'Whether Anaconda publication step should be run. Default is "true"'
    default: 'true'
    required: false

runs:
  using: "composite"
  steps:
    - name: Check if a compliant meta.yml exists in ${{ inputs.conda }} directory
      id: check-meta
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Checking the conda directory if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
          echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.conda }}."
          exit 1
        else
          echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.conda }}."
        fi
        echo "Checking if meta.yaml uses expected build.string..."
        if ! grep -q "string: py{{ PY_VER }}{{ build_suffix }}" meta.yaml; then
          echo "ERROR: meta.yaml must include a build string using environ.get('BUILD_SUFFIX')."
          echo "Example:"
          echo "{% set build_suffix = environ.get('BUILD_SUFFIX', '') %}"
          echo "  ..."
          echo "  build:"
          echo "    string: py{{ PY_VER }}{{ build_suffix }}"
          exit 1
        else
          echo "Found build string using BUILD_SUFFIX."
        fi
        echo "::endgroup::"
      shell: bash
    - name: Check if anaconda login information are available
      id: check-login
      if: ${{ inputs.publish == 'true' }}
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Checking if the token variable is correclty set"
        if [[ "${{ inputs.token }}" == "" ]]; then
          echo "No token variable is set for upload."
          exit 1
        else
          echo "Token is correctly set."
        fi
        echo "::endgroup::"
      shell: bash
    - name: Setup Conda environment
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: 3.${{ inputs.condapython }}
        channels: ${{ inputs.channels }}
        auto-update-conda: false
        miniforge-version: latest
        conda-remove-defaults: true
        channel-priority: strict
    - name: Setup conda-build
      run: |
        echo "::group::Setup conda-build"
        conda install -q conda-build conda-forge-pinning
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Setup anaconda-client
      if: ${{ inputs.publish == 'true' }}
      run: |
        echo "::group::Setup anaconda-client"
        conda install -q anaconda-client
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Package compilation
      id: package-compilation
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Conda packages building"
        export PYTHON_VERSION="3.${{ inputs.python }}"
        export PYTHON_VARIANT="3.${{ inputs.python }}.* *_cpython"
        export GIT_DESCRIBE_TAG=$(git describe --tags --abbrev=0 || echo "dev")
        export BUILD_SUFFIX="${{ inputs.suffix }}"
        export CONFIG="$CONDA_PREFIX/conda_build_config.yaml"
        out_dir=$(mktemp -d conda-build-dir.XXXXXX)
        echo "Running 'conda build' with python ${PYTHON_VERSION} and git version tag ${GIT_DESCRIBE_TAG} and build suffix ${BUILD_SUFFIX}"
        conda build . --output-folder "$out_dir" --python "$PYTHON_VARIANT" -m "$CONFIG" ${{ inputs.build-options }}
        echo "out_dir=$out_dir" >> "$GITHUB_OUTPUT"
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Package uploading
      id: package-uploading
      if: ${{ inputs.publish == 'true' }}
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Conda packages uploading"
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        export PYTHON_VERSION="3.${{ inputs.python }}"
        for BUILD_FILE in ${{ steps.package-compilation.outputs.out_dir }}/*/*.conda; do
          echo "Upload file ${BUILD_FILE} to Anaconda on label ${{ inputs.label }}"
          anaconda upload --force --no-progress --label "${{ inputs.label }}" "${BUILD_FILE}" 
        done
        echo "::endgroup::"
      shell: bash -l {0}
