name: 'build-publish-anaconda'
description: 'Build and Publish anaconda package'
author: 'Thomas Arsouze'
branding:
  icon: 'package'
  color: 'green'
inputs:
  os_name:
    description: 'The name of the os the action is called on (eg ubuntu-latest)'
    required: false
    default: 'unknown'
  conda:
    description: "Directory with conda recipe. Default `.` ."
    required: false
    default: '.'
  condapython:
    description: 'Python3 minor version used for conda.'
    required: false
    default: '12'
  python:
    description: 'Python3 minor version used for building.'
    required: false
    default: '12'
  token:
    description: 'Anaconda access Token (required)'
    required: true
  channels:
    description: 'Optional Extra anaconda channels to use. Coma-separated syntax. Default `conda-forge`.'
    required: false
    default: 'conda-forge'
  publish:
    description: 'Whether we publish the package build on anaconda cloud or not.'
    required: false
    default: 'true'
  publish_only_on:
    description: 'Restrict publishing to a specific OS (e.g., ubuntu-latest). Leave blank to publish without restriction.'
    required: false
    default: ''
  label:
    description: 'Label of conda package published'
    required: false
    default: 'main'
  build-options:
    description: 'Build options for conda build.'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - name: Check if meta.yml exists in ${{ inputs.conda }} directory
      id: check-meta
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Checking the conda directory if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
           echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.conda }}."
           exit 1
        else
           echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.conda }}."
        fi
        echo "::endgroup::"
      shell: bash
    - name: Check if anaconda login information are available
      id: check-login
      if: ${{ inputs.publish == 'true' }}
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Checking if the token variable is correclty set"
        if [[ "${{ inputs.token }}" == "" ]]; then
           echo "No token variable is set for upload."
           exit 1
        else
           echo "Token is correctly set."
        fi
        echo "::endgroup::"
      shell: bash
    - name: Setup Conda environment
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: 3.${{ inputs.condapython }}
        channels: ${{ inputs.channels }}
        auto-update-conda: false
        miniforge-version: latest
        conda-remove-defaults: true
        channel-priority: strict
    - name: Setup conda-build
      run: |
        echo "::group::Setup conda-build"
        conda install -q conda-build conda-forge-pinning
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Setup anaconda-client
      if: ${{ inputs.publish == 'true' }}
      run: |
        echo "::group::Setup anaconda-client"
        conda install -q anaconda-client
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Package compilation
      id: package-compilation
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Conda packages building"
        export PYTHON_VERSION="3.${{ inputs.python }}"
        variants=$(yq -r '.python[]' "$CONDA_PREFIX/conda_build_config.yaml")
        export PYTHON_VARIANT=$(echo "$variants" | grep "^${PYTHON_VERSION}.*")
        export CONFIG="$CONDA_PREFIX/conda_build_config.yaml"
        out_dir=$(mktemp -d conda-build-dir.XXXXXX)
        echo "Running 'conda build' with python ${PYTHON_VERSION} and variant PYTHON_VARIANT$"
        conda build . --output-folder "$out_dir" --python "$PYTHON_VARIANT" -m "$CONFIG" ${{ inputs.build-options }}
        echo "out_dir=$out_dir" >> "$GITHUB_OUTPUT"
        echo "::endgroup::"
      shell: bash -l {0}
    - name: Package uploading
      id: package-uploading
      if: ${{ inputs.publish == 'true' && (inputs.publish_only_on == '' || inputs.publish_only_on == inputs.os_name) }}
      working-directory: ./${{ inputs.conda }}
      run: |
        echo "::group::Conda packages uploading"
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        for BUILD_FILE in ${{ steps.package-compilation.outputs.out_dir }}/*/*.conda; do
          echo "Upload file ${BUILD_FILE} to Anaconda on label ${{ inputs.label }}"
          anaconda upload --force --no-progress --label "${{ inputs.label }}" "${BUILD_FILE}" 
        done
        echo "::endgroup::"
      shell: bash -l {0}
